/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PageObservation struct {
	CustomURL *string `json:"customUrl,omitempty" tf:"custom_url,omitempty"`

	DNSAddress *string `json:"dnsAddress,omitempty" tf:"dns_address,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	StandardURL *string `json:"standardUrl,omitempty" tf:"standard_url,omitempty"`
}

type PageParameters struct {

	// +kubebuilder:validation:Optional
	CustomDomain *string `json:"customDomain,omitempty" tf:"custom_domain,omitempty"`

	// +kubebuilder:validation:Required
	FriendlyName *string `json:"friendlyName" tf:"friendly_name,omitempty"`

	// +kubebuilder:validation:Optional
	Monitors []*float64 `json:"monitors,omitempty" tf:"monitors,omitempty"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// PageSpec defines the desired state of Page
type PageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PageParameters `json:"forProvider"`
}

// PageStatus defines the observed state of Page.
type PageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Page is the Schema for the Pages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,uptimerobotjet}
type Page struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PageSpec   `json:"spec"`
	Status            PageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PageList contains a list of Pages
type PageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Page `json:"items"`
}

// Repository type metadata.
var (
	Page_Kind             = "Page"
	Page_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Page_Kind}.String()
	Page_KindAPIVersion   = Page_Kind + "." + CRDGroupVersion.String()
	Page_GroupVersionKind = CRDGroupVersion.WithKind(Page_Kind)
)

func init() {
	SchemeBuilder.Register(&Page{}, &PageList{})
}
